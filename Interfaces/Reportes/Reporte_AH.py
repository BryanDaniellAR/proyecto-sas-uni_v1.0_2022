# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Bryan\Desktop\INICIO\QTDESIGNER\Reporte_AH.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from DataBase import Query
from datetime import datetime, timedelta
from Libreria.DetectorSemanas import *
from Libreria.ExportarTablaPDF import *
from Libreria.ExportarTablaExcel import *
from PyQt5 import QtCore, QtGui, QtWidgets,QtPrintSupport



class Ui_Form(object):
    def setupUi(self, Form,datos_obtenidos):
        global data_obtenida
        data_obtenida = datos_obtenidos

        Form.setObjectName("Form")
        Form.resize(1188, 655)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(0, 0, 1191, 661))
        self.label.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 rgba(245, 0, 23, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_42 = QtWidgets.QLabel(Form)
        self.label_42.setGeometry(QtCore.QRect(30, 30, 911, 41))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.label_42.setFont(font)
        self.label_42.setObjectName("label_42")
        self.btnVolver = QtWidgets.QPushButton(Form)
        self.btnVolver.setGeometry(QtCore.QRect(920, 470, 241, 131))
        self.btnVolver.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnVolver.setStyleSheet("QPushButton{\n"
        "color: rgb(48, 48, 48);\n"
        "font: 24pt \"Verdana\";\n"
        "border: 2px solid #FFB5B5;\n"
        "padding: 5px;\n"
        "border-radius: 3px;\n"
        "opacity: 200;\n"
        "cursor:pointer;\n"
        "}\n"
        "QPushButton:hover{\n"
        "background-color: rgb(243, 40, 40);\n"
        "}\n"
        "")
        self.btnVolver.setObjectName("btnVolver")
        self.btnImprimir = QtWidgets.QPushButton(Form)
        self.btnImprimir.setGeometry(QtCore.QRect(510, 620, 241, 31))
        self.btnImprimir.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnImprimir.setStyleSheet("QPushButton{\n"
        "color: rgb(48, 48, 48);\n"
        "font: 12pt \"Verdana\";\n"
        "border: 2px solid #FFB5B5;\n"
        "padding: 5px;\n"
        "border-radius: 3px;\n"
        "opacity: 200;\n"
        "cursor:pointer;\n"
        "}\n"
        "QPushButton:hover{\n"
        "background-color: rgb(243, 40, 40);\n"
        "}\n"
        "")
        self.btnImprimir.setObjectName("btnImprimir")
        self.tbAsistencia = QtWidgets.QTableWidget(Form)
        self.tbAsistencia.setGeometry(QtCore.QRect(110, 300, 751, 301))
        self.tbAsistencia.setStyleSheet("")
        self.tbAsistencia.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tbAsistencia.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.tbAsistencia.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tbAsistencia.setObjectName("tbAsistencia")
        self.tbAsistencia.setColumnCount(2)
        self.tbAsistencia.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        item.setFont(font)
        self.tbAsistencia.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbAsistencia.setHorizontalHeaderItem(1, item)
        self.tbAsistencia.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)

        global qtabla
        qtabla = self.tbAsistencia

        self.etBuscar = QtWidgets.QLineEdit(Form)
        self.etBuscar.setGeometry(QtCore.QRect(950, 210, 211, 31))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.etBuscar.setFont(font)
        self.etBuscar.setStyleSheet("QLineEdit {\n"
        "      color: rgb(231, 231, 231);\n"
        "      font: 12pt \"Verdana\";\n"
        "      border: None;\n"
        "      border-bottom-color: white;\n"
        "      border-radius: 10px;\n"
        "      padding: 0 8px;\n"
        "      background: rgb(217, 26, 58);\n"
        "      selection-background-color: darkgray;\n"
        "}")
        self.etBuscar.setObjectName("etBuscar")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(780, 210, 171, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.lbClase = QtWidgets.QLabel(Form)
        self.lbClase.setGeometry(QtCore.QRect(120, 100, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(14)
        self.lbClase.setFont(font)
        self.lbClase.setObjectName("lbClase")
        self.btnAbrirRE = QtWidgets.QPushButton(Form)
        self.btnAbrirRE.setGeometry(QtCore.QRect(230, 620, 241, 31))
        self.btnAbrirRE.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnAbrirRE.setStyleSheet("QPushButton{\n"
        "color: rgb(48, 48, 48);\n"
        "font: 12pt \"Verdana\";\n"
        "border: 2px solid #FFB5B5;\n"
        "padding: 5px;\n"
        "border-radius: 3px;\n"
        "opacity: 200;\n"
        "cursor:pointer;\n"
        "}\n"
        "QPushButton:hover{\n"
        "background-color: rgb(243, 40, 40);\n"
        "}\n"
        "")
        self.btnAbrirRE.setObjectName("btnAbrirRE")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(30, 210, 171, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(410, 130, 331, 41))
        self.label_2.setStyleSheet("border: 2px solid #fd0000;")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.cbSemana = QtWidgets.QComboBox(Form)
        self.cbSemana.setGeometry(QtCore.QRect(190, 210, 191, 22))
        self.cbSemana.setObjectName("cbSemana")

        global qsemana
        qsemana=self.cbSemana

        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(30, 100, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_7 = QtWidgets.QLabel(Form)
        self.label_7.setGeometry(QtCore.QRect(400, 210, 171, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(12)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.cbHorario = QtWidgets.QComboBox(Form)
        self.cbHorario.setGeometry(QtCore.QRect(560, 210, 191, 22))
        self.cbHorario.setObjectName("cbHorario")

        global qhorario
        qhorario = self.cbHorario

        self.rbInasistencia = QtWidgets.QRadioButton(Form)
        self.rbInasistencia.setGeometry(QtCore.QRect(580, 140, 121, 23))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbInasistencia.setFont(font)
        self.rbInasistencia.setStyleSheet("")
        self.rbInasistencia.setObjectName("rbInasistencia")
        self.rbAsistencia = QtWidgets.QRadioButton(Form)
        self.rbAsistencia.setGeometry(QtCore.QRect(460, 140, 101, 23))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.rbAsistencia.setFont(font)
        self.rbAsistencia.setStyleSheet("")
        self.rbAsistencia.setChecked(True)
        self.rbAsistencia.setObjectName("rbAsistencia")

        global qrbAsistencia
        qrbAsistencia = self.rbAsistencia

        self.label_8 = QtWidgets.QLabel(Form)
        self.label_8.setGeometry(QtCore.QRect(30, 180, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.cbPeriodo = QtWidgets.QComboBox(Form)
        self.cbPeriodo.setGeometry(QtCore.QRect(110, 180, 131, 22))
        self.cbPeriodo.setObjectName("cbPeriodo")

        global ComboPeriodo
        ComboPeriodo = self.cbPeriodo

        self.label_9 = QtWidgets.QLabel(Form)
        self.label_9.setGeometry(QtCore.QRect(30, 260, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_6 = QtWidgets.QLabel(Form)
        self.label_6.setGeometry(QtCore.QRect(340, 260, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.lbSemana = QtWidgets.QLabel(Form)
        self.lbSemana.setGeometry(QtCore.QRect(470, 260, 211, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(12)
        self.lbSemana.setFont(font)
        self.lbSemana.setObjectName("lbSemana")
        self.lbPeriodoActual = QtWidgets.QLabel(Form)
        self.lbPeriodoActual.setGeometry(QtCore.QRect(160, 260, 111, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(12)
        self.lbPeriodoActual.setFont(font)
        self.lbPeriodoActual.setObjectName("lbPeriodoActual")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        fecha_actual = format(datetime.today().year)+"-"+format(datetime.today().month)+"-"+format(datetime.today().day)

        #INGRESAREMOS EL VALOR DE LA CLASE SELECCIONADA
        #------------------------------------------------
        self.lbClase.setText(datos_obtenidos[2])# ╝@@╝
        #OBTENDREMOS LA LISTA DE PERIODO LLENADO POR PRIMERA VEZ
        #------------------------------------------------
        lista_periodo = Query.informacion_periodo()
        descripcion_periodo = []
        for i in lista_periodo:
            descripcion_periodo.append(i[1])
        self.cbPeriodo.addItems(descripcion_periodo) #╝@@╝
        #------------------------------------------------------
        #OBTENDREMOS LA LISTA DE SEMANA LLENADO POR PRIMERA VEZ
        #--------------------------------------------------------
        lista_semana = deteccion_semanas(lista_periodo[0][2],lista_periodo[0][3],'%Y-%m-%d')
        semana_inicial = []
        for i in range(lista_semana):
            semana_inicial.append("Semana "+str(i+1))
        self.cbSemana.addItems(semana_inicial)          #╝@@╝
        #--------------------------------------------------------
        #OBTENDREMOS LA LISTA DE DIAS DE SEMANA LLENADO POR PRIMERA VEZ
        #--------------------------------------------------------
        lista_dias_semana = Query.dias_clase(data_obtenida[2])
        dias_semana_inicial = []
        for i in lista_dias_semana:
            dias_semana_inicial.append(i[1])
        self.cbHorario.addItems(dias_semana_inicial) #╝@@╝
        #--------------------------------------------------------
        #INGRESAREMOS EL VALOR DEL PERIODO ACTUAL Y SEMANA ACTUAL
        datos_semana_actual = identificarSemanaActual(lista_periodo,fecha_actual)
        self.lbPeriodoActual.setText(datos_semana_actual[0])
        self.lbSemana.setText(datos_semana_actual[1])   #╝@@╝
        #--------------------------------------------------------
        #LLENADO DE TABLA PRIMERA VEZ #
        global alumnos_clase_periodoAH
        semana_numero_int = [int(temp)for temp in self.cbSemana.currentText().split() if temp.isdigit()]
        alumnos_clase_periodoAH = Query.alumnos_asistencia_periodo_semana_dia_clase(datos_obtenidos[2],self.cbPeriodo.currentText(),semana_numero_int[0],self.cbHorario.currentText())
        #alumnos_clase_periodoAH = Query.alumnos_periodo_semana_dia_clase(datos_obtenidos[2],self.cbPeriodo.currentText(),semana_numero_int[0],self.cbHorario.currentText())
        #print(alumnos_clase_periodoAH)
        #alumnos_clase_periodoAS = Query.alumnos_clase_periodo(datos_obtenidos[2],self.cbPeriodo.currentText())
        
        alumnos_de_reporte_ah_asistencia = SepararListaAlumnosReporteAH(self.rbAsistencia.isChecked())
        
        self.tbAsistencia.setRowCount(len(alumnos_de_reporte_ah_asistencia))
        for a in range(len(alumnos_de_reporte_ah_asistencia)):
            for b in range(len(alumnos_de_reporte_ah_asistencia[0])):
                self.tbAsistencia.setItem(a,b, QtWidgets.QTableWidgetItem(alumnos_de_reporte_ah_asistencia[a][b]))
        self.tbAsistencia.resizeColumnsToContents() #╝@@╝

        #-------------------------------
        #AL DAR SELECCION EN ALGUN ASISTENCIA E INASISTENCIA 
        self.rbInasistencia.toggled.connect(self.completar_tabla_inasistencia) #╝@@╝
        #----------------------------------
        #AL SELECCIONAR UN COMBO BOX
        self.cbPeriodo.currentTextChanged.connect(self.PresionarPeriodo) #╝@@╝
        #print(self.cbSemana.currentText())
        #if(self.cbSemana.currentIndex() !=0):
        global valor_dejado_periodo
        valor_dejado_periodo = []
        valor_dejado_periodo.append(self.cbPeriodo.currentText())

        self.cbSemana.currentTextChanged.connect(self.PresionarSemana) #╝@@╝
        #self.cbHorario.currentTextChanged.connect(self.PresionarHorario)
        self.cbHorario.currentTextChanged.connect(self.completar_tabla_inasistencia) 
        #self.rbInasistencia.clicked = self.completar_tabla_inasistencia
        #-----------------------------
        #AL DAR CLICK EN LA BUSQUEDA
        global tabla_inicial
        tabla_inicial = []
        self.etBuscar.textChanged.connect(self.BuscarTabla)
        #Dar CLICK EN IMPRIMIR
        #------------------------------------
        self.btnImprimir.clicked.connect(self.ImprimirTabla)
        #------------------------------------
        #Dar CLICK EN BOTON PARA EXCEL
        #------------------------------------
        self.btnAbrirRE.clicked.connect(self.ExportarExcel)
        #------------------------------------
        #DAR CLICK EN VOLVER
        self.btnVolver.clicked.connect(Form.close)
        #------------------------------

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_42.setText(_translate("Form", "REPORTE DE ASISTENCIA POR HORARIO"))
        self.btnVolver.setText(_translate("Form", "VOLVER"))
        self.btnImprimir.setText(_translate("Form", "IMPRIMIR"))
        item = self.tbAsistencia.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Código"))
        item = self.tbAsistencia.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Alumno"))
        self.etBuscar.setPlaceholderText(_translate("Form", "Alumno a buscar"))
        self.label_5.setText(_translate("Form", "Buscar por alumno:"))
        self.lbClase.setText(_translate("Form", "Seleccione una clase"))
        self.btnAbrirRE.setText(_translate("Form", "ABRIR REPORTE EN EXCEL"))
        self.label_4.setText(_translate("Form", "Seleccione semana"))
        self.label_3.setText(_translate("Form", "Clase:"))
        self.label_7.setText(_translate("Form", "Seleccione horario"))
        self.rbInasistencia.setText(_translate("Form", "Inasistencia"))
        self.rbAsistencia.setText(_translate("Form", "Asistencia"))
        self.label_8.setText(_translate("Form", "Periodo:"))
        self.label_9.setText(_translate("Form", "Periodo actual:"))
        self.label_6.setText(_translate("Form", "Semana actual:"))
        self.lbSemana.setText(_translate("Form", "Sin selección de semana"))
        self.lbPeriodoActual.setText(_translate("Form", "Selecciona"))


    def PresionarPeriodo(self,Form):
        semana = []
        lista_Horario = Query.informacion_periodo_seleccionado(str(self.cbPeriodo.currentText()))
        for i in lista_Horario:
            semana_detectada = deteccion_semanas(i[2],i[3],'%Y-%m-%d')
            for i in range(semana_detectada):
                semana.append("Semana "+str(i+1))
            #print(self.cbSemana.currentText())
        #self.cbSemana.disconnect(True)
        
        self.cbSemana.clear()
        self.cbSemana.addItems(semana)
        if(len(valor_dejado_periodo)==0):
            valor_dejado_periodo.append(self.cbPeriodo.currentText())
        else:
            valor_dejado_periodo[0] = self.cbPeriodo.currentText()

        completarTablaPeriodo()

    def PresionarSemana(self,Form):
        if(len(valor_dejado_periodo)!=0):
            if(self.cbPeriodo.currentText() == valor_dejado_periodo[0]):
                completarTablaSemana()
    
    def PresionarHorario(self,Form):
        print("Horario") #SIN USAR YA QUE SE USA OTRO YA CREADO PARA REUSAR RECURSOS
        

    def completar_tabla_inasistencia(self,Form):
        self.tbAsistencia.clearContents()

        alumnos_de_reporte_as_inasistencia = SepararListaAlumnosReporteAH(self.rbAsistencia.isChecked())
        
        self.tbAsistencia.setRowCount(len(alumnos_de_reporte_as_inasistencia))
        for a in range(len(alumnos_de_reporte_as_inasistencia)):
            for b in range(len(alumnos_de_reporte_as_inasistencia[0])):
                self.tbAsistencia.setItem(a,b, QtWidgets.QTableWidgetItem(alumnos_de_reporte_as_inasistencia[a][b]))
        self.tbAsistencia.resizeColumnsToContents()
    
    def BuscarTabla(self,Form):
        name = self.etBuscar.text().lower()
        for row in range(self.tbAsistencia.rowCount()):
            item = self.tbAsistencia.item(row, 1)
            # if the search is *not* in the item's text *do not hide* the row
            self.tbAsistencia.setRowHidden(row, name not in item.text().lower())

    def ImprimirTabla(self,Form):
        exportarPDF(qtabla,"ReporteAH.("+ComboPeriodo.currentText()+")."+qsemana.currentText()+"."+self.cbHorario.currentText())
    
    def ExportarExcel(self,Form):
        cabezera = cabezeraActualTabla()
        lista_tabla_actual = listaActualTabla()
        exportarExcel(lista_tabla_actual,cabezera,"ReporteAS.("+ComboPeriodo.currentText()+")."+qsemana.currentText()+"."+self.cbHorario.currentText())

def identificarSemanaActual(lista_periodo,fecha_actual):
    datos_semana = []
    for i in lista_periodo:
        if(fecha_actual>=i[2] and fecha_actual<= i[3]):
            semana_actual = deteccion_semanas(i[2],fecha_actual,'%Y-%m-%d')
            #semana_actual = int((fecha_actual-i[2])/7)
            datos_semana.append(i[1])
            datos_semana.append(str(semana_actual+1))
            return datos_semana
    return datos_semana

def SepararListaAlumnosReporteAH(activado_asistencia):
    alumnos_de_reporte_ah = []
    
    semana_numero_int = [int(temp)for temp in qsemana.currentText().split() if temp.isdigit()]
    alumnos_clase_periodoAH =Query.alumnos_asistencia_periodo_semana_dia_clase(data_obtenida[2],ComboPeriodo.currentText(),semana_numero_int[0],qhorario.currentText())
    if len(alumnos_clase_periodoAH)>0:
        if activado_asistencia == True:
            alumnos_de_reporte_ah = alumnos_clase_periodoAH
        else:
            alumnos_clase_periodoAH = Query.alumnos_inasistencia_periodo_semana_dia_clase(data_obtenida[2],ComboPeriodo.currentText(),semana_numero_int[0],qhorario.currentText())
            alumnos_de_reporte_ah = alumnos_clase_periodoAH
    return alumnos_de_reporte_ah

def completarTablaPeriodo():
    qtabla.clearContents()
    
    alumnos_de_reporte_as_inasistencia = SepararListaAlumnosReporteAH(qrbAsistencia.isChecked())
    qtabla.setRowCount(len(alumnos_de_reporte_as_inasistencia))
    for a in range(len(alumnos_de_reporte_as_inasistencia)):
        for b in range(len(alumnos_de_reporte_as_inasistencia[0])):
            qtabla.setItem(a,b, QtWidgets.QTableWidgetItem(alumnos_de_reporte_as_inasistencia[a][b]))
    qtabla.resizeColumnsToContents()

def completarTablaSemana():
    qtabla.clearContents()
    alumnos_clase_periodoAS = Query.alumnos_clase_periodo(data_obtenida[2],ComboPeriodo.currentText())
    alumnos_de_reporte_as_inasistencia = SepararListaAlumnosReporteAH(qrbAsistencia.isChecked())
    qtabla.setRowCount(len(alumnos_de_reporte_as_inasistencia))
    for a in range(len(alumnos_de_reporte_as_inasistencia)):
        for b in range(len(alumnos_de_reporte_as_inasistencia[0])):
            qtabla.setItem(a,b, QtWidgets.QTableWidgetItem(alumnos_de_reporte_as_inasistencia[a][b]))
    qtabla.resizeColumnsToContents()

def listaActualTabla():
    rows = qtabla.rowCount()
    for n in range(rows):
        fila=[]
        for column in range(qtabla.model().columnCount()):
            fila.append(qtabla.item(n, column).text())
        tabla_inicial.append(fila)
    return tabla_inicial

def cabezeraActualTabla():
    cabezera_obtenido = []
    for i in range(qtabla.model().columnCount()):
        label = qtabla.horizontalHeaderItem(i).text()
        cabezera_obtenido.append(label)
    return cabezera_obtenido

'''if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())'''
