# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Bryan\Desktop\INICIO\QTDESIGNER\Reporte_RM.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import math
from numpy.linalg import qr
from DataBase import Query
from datetime import datetime, timedelta
from Libreria.DetectorSemanas import *
from Libreria.ExportarTablaPDF import *
from Libreria.ExportarTablaExcel import *
from PyQt5 import QtCore, QtGui, QtWidgets,QtPrintSupport
from PyQt5.QtCore import Qt, QSortFilterProxyModel
from PyQt5.QtGui import QStandardItemModel, QStandardItem


class Ui_Form(object):
    def setupUi(self, Form,datos_obtenidos):
        global data_obtenida
        data_obtenida = datos_obtenidos
            
        Form.setObjectName("Form")
        Form.resize(1158, 650)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(0, 0, 1191, 651))
        self.label.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 rgba(245, 0, 23, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_42 = QtWidgets.QLabel(Form)
        self.label_42.setGeometry(QtCore.QRect(30, 20, 841, 41))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.label_42.setFont(font)
        self.label_42.setObjectName("label_42")
        self.btnVolver = QtWidgets.QPushButton(Form)
        self.btnVolver.setGeometry(QtCore.QRect(900, 460, 241, 131))
        self.btnVolver.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnVolver.setStyleSheet("QPushButton{\n"
        "color: rgb(48, 48, 48);\n"
        "font: 24pt \"Verdana\";\n"
        "border: 2px solid #FFB5B5;\n"
        "padding: 5px;\n"
        "border-radius: 3px;\n"
        "opacity: 200;\n"
        "cursor:pointer;\n"
        "}\n"
        "QPushButton:hover{\n"
        "background-color: rgb(243, 40, 40);\n"
        "}\n"
        "")
        self.btnVolver.setObjectName("btnVolver")
        self.btnImprimir = QtWidgets.QPushButton(Form)
        self.btnImprimir.setGeometry(QtCore.QRect(510, 610, 241, 31))
        self.btnImprimir.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnImprimir.setStyleSheet("QPushButton{\n"
        "color: rgb(48, 48, 48);\n"
        "font: 12pt \"Verdana\";\n"
        "border: 2px solid #FFB5B5;\n"
        "padding: 5px;\n"
        "border-radius: 3px;\n"
        "opacity: 200;\n"
        "cursor:pointer;\n"
        "}\n"
        "QPushButton:hover{\n"
        "background-color: rgb(243, 40, 40);\n"
        "}\n"
        "")
        self.btnImprimir.setObjectName("btnImprimir")
        self.tbAsistencia = QtWidgets.QTableWidget(Form)
        self.tbAsistencia.setGeometry(QtCore.QRect(100, 190, 751, 401))
        self.tbAsistencia.setStyleSheet("")
        self.tbAsistencia.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tbAsistencia.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.tbAsistencia.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tbAsistencia.setObjectName("tbAsistencia")
        self.tbAsistencia.setColumnCount(3)
        self.tbAsistencia.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbAsistencia.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbAsistencia.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbAsistencia.setHorizontalHeaderItem(2, item)
        self.tbAsistencia.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)

        global qtabla
        qtabla = self.tbAsistencia

        self.btnAbrirRE = QtWidgets.QPushButton(Form)
        self.btnAbrirRE.setGeometry(QtCore.QRect(230, 610, 241, 31))
        self.btnAbrirRE.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnAbrirRE.setStyleSheet("QPushButton{\n"
        "color: rgb(48, 48, 48);\n"
        "font: 12pt \"Verdana\";\n"
        "border: 2px solid #FFB5B5;\n"
        "padding: 5px;\n"
        "border-radius: 3px;\n"
        "opacity: 200;\n"
        "cursor:pointer;\n"
        "}\n"
        "QPushButton:hover{\n"
        "background-color: rgb(243, 40, 40);\n"
        "}\n"
        "")
        self.btnAbrirRE.setObjectName("btnAbrirRE")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(30, 150, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        '''self.cbHorario = QtWidgets.QComboBox(Form)
        self.cbHorario.setGeometry(QtCore.QRect(570, 150, 191, 22))
        self.cbHorario.setObjectName("cbHorario")'''
        self.cbMes = QtWidgets.QComboBox(Form)
        self.cbMes.setGeometry(QtCore.QRect(190, 150, 191, 22))
        self.cbMes.setObjectName("cbMes")

        global qmes
        qmes=self.cbMes
        
        self.label_7 = QtWidgets.QLabel(Form)
        self.label_7.setGeometry(QtCore.QRect(400, 150, 171, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(12)
        '''self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")'''
        self.label_8 = QtWidgets.QLabel(Form)
        self.label_8.setGeometry(QtCore.QRect(30, 110, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.cbPeriodo = QtWidgets.QComboBox(Form)
        self.cbPeriodo.setGeometry(QtCore.QRect(110, 110, 131, 22))
        self.cbPeriodo.setObjectName("cbPeriodo")

        global ComboPeriodo
        ComboPeriodo = self.cbPeriodo

        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(30, 70, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.lbClase = QtWidgets.QLabel(Form)
        self.lbClase.setGeometry(QtCore.QRect(110, 70, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(14)
        self.lbClase.setFont(font)
        self.lbClase.setObjectName("lbClase")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        fecha_actual = format(datetime.today().year)+"-"+format(datetime.today().month)+"-"+format(datetime.today().day)

        #INGRESAREMOS EL VALOR DE LA CLASE SELECCIONADA
        #------------------------------------------------
        self.lbClase.setText(datos_obtenidos[2])
        #OBTENDREMOS LA LISTA DE PERIODO LLENADO POR PRIMERA VEZ
        #------------------------------------------------
        lista_periodo = Query.informacion_periodo()
        descripcion_periodo = []
        for i in lista_periodo:
            descripcion_periodo.append(i[1])
        self.cbPeriodo.addItems(descripcion_periodo)
        #------------------------------------------------------
        #OBTENDREMOS LA LISTA DE MES LLENADO POR PRIMERA VEZ
        #--------------------------------------------------------
        lista_semana = deteccion_semanas(lista_periodo[0][2],lista_periodo[0][3],'%Y-%m-%d')
        cantidad_mes = math.ceil(round(lista_semana/4,2))
        mes_inicial = []
        for i in range(int(cantidad_mes)):
            mes_inicial.append("Mes "+str(i+1))
        self.cbMes.addItems(mes_inicial)
        #--------------------------------------------------------
        #INGRESAREMOS EL VALOR DEL PERIODO ACTUAL Y SEMANA ACTUAL
        #datos_semana_actual = identificarSemanaActual(lista_periodo,fecha_actual)
        #self.lbPeriodoActual.setText(datos_semana_actual[0])
        #self.lbSemana.setText(datos_semana_actual[1])
        #--------------------------------------------------------
        #LLENADO DE TABLA PRIMERA VEZ
        global alumnos_clase_periodoRM
        alumnos_clase_periodoRM = Query.alumnos_clase_periodo(datos_obtenidos[2],self.cbPeriodo.currentText())
        alumnos_de_reporte_rm_asistencia = SepararListaAlumnosReporteRM()
        
        self.tbAsistencia.setRowCount(len(alumnos_de_reporte_rm_asistencia))
        for a in range(len(alumnos_de_reporte_rm_asistencia)):
            for b in range(len(alumnos_de_reporte_rm_asistencia[0])):
                self.tbAsistencia.setItem(a,b, QtWidgets.QTableWidgetItem(alumnos_de_reporte_rm_asistencia[a][b]))
        self.tbAsistencia.resizeColumnsToContents()

        #----------------------------------
        #AL SELECCIONAR UN COMBO BOX 
        self.cbPeriodo.currentTextChanged.connect(self.PresionarPeriodo)
        #print(self.cbSemana.currentText())
        #if(self.cbSemana.currentIndex() !=0):
        global valor_dejado_periodo
        valor_dejado_periodo = []
        valor_dejado_periodo.append(self.cbPeriodo.currentText())

        self.cbMes.currentTextChanged.connect(self.PresionarMes)
        #self.rbInasistencia.clicked = self.completar_tabla_inasistencia
        #-----------------------------
        #AL DAR CLICK EN LA BUSQUEDA
        global tabla_inicial
        tabla_inicial = []

        #self.etBuscar.textChanged.connect(self.BuscarTabla)
        #Dar CLICK EN IMPRIMIR
        #------------------------------------
        self.btnImprimir.clicked.connect(self.ImprimirTabla)
        #------------------------------------
        #Dar CLICK EN BOTON PARA EXCEL
        #------------------------------------
        self.btnAbrirRE.clicked.connect(self.ExportarExcel)
        #------------------------------------
        #DAR CLICK EN VOLVER
        self.btnVolver.clicked.connect(Form.close)
        #------------------------------

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_42.setText(_translate("Form", "REPORTE DE ALUMNOS POR MES"))
        self.btnVolver.setText(_translate("Form", "VOLVER"))
        self.btnImprimir.setText(_translate("Form", "IMPRIMIR"))
        item = self.tbAsistencia.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Código"))
        item = self.tbAsistencia.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Nombre"))
        item = self.tbAsistencia.horizontalHeaderItem(2)
        item.setText(_translate("Form", "N° Asistencia"))
        self.btnAbrirRE.setText(_translate("Form", "ABRIR REPORTE EN EXCEL"))
        self.label_4.setText(_translate("Form", "Seleccione mes:"))
        #self.label_7.setText(_translate("Form", "Seleccione horario:"))
        self.label_8.setText(_translate("Form", "Periodo:"))
        self.label_3.setText(_translate("Form", "Clase:"))
        self.lbClase.setText(_translate("Form", "Seleccione una clase"))

    def PresionarPeriodo(self,Form):
        mes = []
        lista_Horario = Query.informacion_periodo_seleccionado(str(self.cbPeriodo.currentText()))
        for i in lista_Horario:
            semana_detectada = deteccion_semanas(i[2],i[3],'%Y-%m-%d')
            cantidad_mes = math.ceil(round(semana_detectada/4,2))
            for i in range(cantidad_mes):
                mes.append("Mes "+str(i+1))
            #print(self.cbSemana.currentText())
        #self.cbSemana.disconnect(True)
        
        self.cbMes.clear()
        self.cbMes.addItems(mes)
        if(len(valor_dejado_periodo)==0):
            valor_dejado_periodo.append(self.cbPeriodo.currentText())
        else:
            valor_dejado_periodo[0] = self.cbPeriodo.currentText()

        completarTablaPeriodo()

    def PresionarMes(self,Form):
        if(len(valor_dejado_periodo)!=0):
            if(self.cbPeriodo.currentText() == valor_dejado_periodo[0]):
                completarTablaMes()


    def ImprimirTabla(self,Form):
        exportarPDF(qtabla,"ReporteRM.("+ComboPeriodo.currentText()+")."+qmes.currentText())
    
    def ExportarExcel(self,Form):
        cabezera = cabezeraActualTabla()
        lista_tabla_actual = listaActualTabla()
        exportarExcel(lista_tabla_actual,cabezera,"ReporteRM.("+ComboPeriodo.currentText()+")."+qmes.currentText())

def identificarSemanaActual(lista_periodo,fecha_actual):
    datos_semana = []
    for i in lista_periodo:
        if(fecha_actual>=i[2] and fecha_actual<= i[3]):
            semana_actual = deteccion_semanas(i[2],fecha_actual,'%Y-%m-%d')
            #semana_actual = int((fecha_actual-i[2])/7)
            datos_semana.append(i[1])
            datos_semana.append(str(semana_actual+1))
            return datos_semana
    return datos_semana

def SepararListaAlumnosReporteRM():
    alumnos_de_reporte_as = []
    alumnos_clase_periodo = Query.alumnos_clase_periodo(data_obtenida[2],ComboPeriodo.currentText())
    mes_numero_int = [int(temp)for temp in qmes.currentText().split() if temp.isdigit()]
    #print(data_obtenida[2],ComboPeriodo.currentText(),alumnos_clase_periodo[0][0],mes_numero_int[0])
    if len(alumnos_clase_periodo)>0:
        for a in range(len(alumnos_clase_periodo)):
            lista_separada=[]
            lista_separada.append(alumnos_clase_periodo[a][0])
            lista_separada.append(alumnos_clase_periodo[a][1])
            asistencia_acumulada_mes = Query.cantidad_alumnos_asistencia_periodo_mes(data_obtenida[2],ComboPeriodo.currentText(),alumnos_clase_periodo[a][0],mes_numero_int[0])
            #print(asistencia_acumulada_mes)
            lista_separada.append(str(asistencia_acumulada_mes[0][0]))
            alumnos_de_reporte_as.append(lista_separada)
    return alumnos_de_reporte_as

def completarTablaPeriodo():
    qtabla.clearContents()
    
    alumnos_de_reporte_rm = SepararListaAlumnosReporteRM()
    qtabla.setRowCount(len(alumnos_de_reporte_rm))
    for a in range(len(alumnos_de_reporte_rm)):
        for b in range(len(alumnos_de_reporte_rm[0])):
            qtabla.setItem(a,b, QtWidgets.QTableWidgetItem(alumnos_de_reporte_rm[a][b]))
    qtabla.resizeColumnsToContents()

def completarTablaMes():
    qtabla.clearContents()
    #alumnos_clase_periodoAS = Query.alumnos_clase_periodo(data_obtenida[2],ComboPeriodo.currentText())

    alumnos_de_reporte_rm = SepararListaAlumnosReporteRM()

    qtabla.setRowCount(len(alumnos_de_reporte_rm))

    for a in range(len(alumnos_de_reporte_rm)):

        for b in range(len(alumnos_de_reporte_rm[0])):

            qtabla.setItem(a,b, QtWidgets.QTableWidgetItem(alumnos_de_reporte_rm[a][b]))
    qtabla.resizeColumnsToContents()

def listaActualTabla():
    rows = qtabla.rowCount()
    for n in range(rows):
        fila=[]
        for column in range(qtabla.model().columnCount()):
            fila.append(qtabla.item(n, column).text())
        tabla_inicial.append(fila)
    return tabla_inicial

def cabezeraActualTabla():
    cabezera_obtenido = []
    for i in range(qtabla.model().columnCount()):
        label = qtabla.horizontalHeaderItem(i).text()
        cabezera_obtenido.append(label)
    return cabezera_obtenido
